---
openapi: 3.0.0
info:
  title: Swagger pharmacy
  description: |
    This is a sample pharmacy server.
  contact:
    email: droush.b@gmail.com
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/Droushb/Pharmacy/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://virtserver.swaggerhub.com/Droushb/test/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://pharmacy.swagger.io/v2
tags:
- name: drug
  description: Everything about your drugs
- name: store
  description: Access to pharmacy orders
- name: user
  description: Operations about user
paths:
  /drug:
    put:
      tags:
      - drug
      summary: Update an existing drug
      operationId: updatedrug
      requestBody:
        $ref: '#/components/requestBodies/drug'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: drug not found
        "405":
          description: Validation exception
      security:
      - pharmacy_auth:
        - write:drugs
        - read:drugs
    post:
      tags:
      - drug
      summary: Add a new drug to the store
      operationId: adddrug
      requestBody:
        $ref: '#/components/requestBodies/drug'
      responses:
        "405":
          description: Invalid input
      security:
      - pharmacy_auth:
        - write:drugs
        - read:drugs
  /drug/{drugId}:
    get:
      tags:
      - drug
      summary: Find drug by ID
      description: Returns a single drug
      operationId: getdrugById
      parameters:
      - name: drugId
        in: path
        description: ID of drug to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drug'
            application/xml:
              schema:
                $ref: '#/components/schemas/Drug'
        "400":
          description: Invalid ID supplied
        "404":
          description: drug not found
      security:
      - api_key: []
    post:
      tags:
      - drug
      summary: Updates a drug in the store with form data
      operationId: updatedrugWithForm
      parameters:
      - name: drugId
        in: path
        description: ID of drug that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/drug_drugId_body'
      responses:
        "405":
          description: Invalid input
      security:
      - pharmacy_auth:
        - write:drugs
        - read:drugs
    delete:
      tags:
      - drug
      summary: Deletes a drug
      operationId: deletedrug
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: drugId
        in: path
        description: drug id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: drug not found
      security:
      - pharmacy_auth:
        - write:drugs
        - read:drugs
  /store/inventory:
    get:
      tags:
      - store
      summary: Returns drug inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - api_key: []
  /store/demand:
    post:
      tags:
      - store
      summary: Place a drug to demand
      operationId: placeDrug
      requestBody:
        description: the drug is added to the demand
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "200":
          description: successful added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid demand
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a drug
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the drug
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid Order
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of drug that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          maximum: 10
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        drugId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/Status'
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: User
    Status:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
          format: (order(confirmed, in progress, finished), drug(availablem, pending, sold))
      xml:
        name: Status
    Drug:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/Status'
      xml:
        name: Drug
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    drug_drugId_body:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the drug
        status:
          type: string
          description: Updated status of the drug
  requestBodies:
    drug:
      description: drug object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Drug'
        application/xml:
          schema:
            $ref: '#/components/schemas/Drug'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    pharmacy_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://pharmacy.swagger.io/oauth/dialog
          scopes:
            write:drugs: modify drugs in your account
            read:drugs: read your drugs
    api_key:
      type: apiKey
      name: api_key
      in: header
